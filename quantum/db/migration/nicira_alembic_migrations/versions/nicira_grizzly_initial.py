# vim: tabstop=4 shiftwidth=4 softtabstop=4
#
# Copyright 2013 OpenStack Foundation
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#

"""nicira-grizzly

Revision ID: nicira-grizzly
Revises: 5a875d0e5c
Create Date: 2013-04-24 13:33:08.681468

"""

# revision identifiers, used by Alembic.
revision = 'nicira-grizzly'
down_revision = '5a875d0e5c'

# Change to ['*'] if this migration applies to all plugins

migration_for_plugins = [
    'quantum.plugins.nicira.nicira_nvp_plugin.QuantumPlugin.NvpPluginV2'
]

from alembic import op
import sqlalchemy as sa

from quantum.db import migration


def upgrade(active_plugin=None, options=None):
    if not migration.should_run(active_plugin, migration_for_plugins):
        return

    op.create_table(
        'agents',
        sa.Column('id', sa.String(length=36), nullable=False),
        sa.Column('agent_type', sa.String(length=255), nullable=False),
        sa.Column('binary', sa.String(length=255), nullable=False),
        sa.Column('topic', sa.String(length=255), nullable=False),
        sa.Column('host', sa.String(length=255), nullable=False),
        sa.Column('admin_state_up', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('started_at', sa.DateTime(), nullable=False),
        sa.Column('heartbeat_timestamp', sa.DateTime(), nullable=False),
        sa.Column('description', sa.String(length=255), nullable=True),
        sa.Column('configurations', sa.String(length=4095), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'networkdhcpagentbindings',
        sa.Column('network_id', sa.String(length=36), nullable=False),
        sa.Column('dhcp_agent_id', sa.String(length=36), nullable=False),
        sa.ForeignKeyConstraint(['dhcp_agent_id'], ['agents.id'],
                                ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['network_id'], ['networks.id'],
                                ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('network_id', 'dhcp_agent_id')
    )
    op.create_table(
        'networksecuritybindings',
        sa.Column('network_id', sa.String(length=36), nullable=False),
        sa.Column('port_security_enabled', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['network_id'], ['networks.id'],
                                ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('network_id')
    )
    op.create_table(
        'routerl3agentbindings',
        sa.Column('id', sa.String(length=36), nullable=False),
        sa.Column('router_id', sa.String(length=36), nullable=True),
        sa.Column('l3_agent_id', sa.String(length=36), nullable=True),
        sa.ForeignKeyConstraint(['l3_agent_id'], ['agents.id'],
                                ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['router_id'], ['routers.id'],
                                ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.rename_table('routes', 'subnetroutes')
    op.drop_column('networkgateways', 'shared')
    op.alter_column('nvp_network_bindings', 'tz_uuid',
                    name='phy_uuid',
                    existing_type=sa.String(length=36),
                    existing_nullable=True)
    #Note: We do not drop security_type for simplifying downgrade
    op.add_column('portsecuritybindings',
                  sa.Column('port_security_enabled',
                            sa.Boolean(), nullable=False))
    # Because of the fk constraint it is easier to create a new
    # column and move the data than altering the schema
    op.add_column('securitygrouprules',
                  sa.Column('remote_group_id', sa.String(length=36),
                            sa.ForeignKey('securitygroups.id',
                                          name="fk_remote_group_id"),
                            nullable=True))
    op.execute("UPDATE securitygrouprules SET "
               "remote_group_id=source_group_id")
    # Note: Here we're relying on name autogenerated by mysql
    # Note2: type attribute is referred as type_ in the alembic docs
    op.drop_constraint('securitygrouprules_ibfk_2', 'securitygrouprules',
                       type='foreignkey')
    op.drop_column('securitygrouprules', 'source_group_id')
    op.alter_column('securitygrouprules', 'source_ip_prefix',
                    name='remote_ip_prefix',
                    existing_type=sa.String(length=255),
                    existing_nullable=True)
    op.drop_column('securitygrouprules', 'external_id')
    op.drop_column('securitygroups', 'external_id')
    # Data transformations
    # Copy network and port ids over to networksecuritybindings table
    # and set port_security_enabled to false as ip address pairs were not
    # configured in NVP originally.
    op.execute("INSERT INTO networksecuritybindings SELECT id as "
               "network_id, True as port_security_enabled from networks")
    # Convert mac or mac_ip into True for portsecurity bindings
    op.execute("UPDATE portsecuritybindings SET port_security_enabled=True "
               "WHERE security_type in ('mac', 'mac_ip')")


def downgrade(active_plugin=None, options=None):
    if not migration.should_run(active_plugin, migration_for_plugins):
        return

    op.add_column('securitygroups', sa.Column('external_id', sa.Integer(),
                                              nullable=True))
    # Because of the fk constraint it is easier to create a new
    # column and move the data than altering the schema
    op.add_column('securitygrouprules',
                  sa.Column('source_group_id', sa.String(length=36),
                            sa.ForeignKey('securitygroups.id',
                            name='securitygrouprules_ibfk_2'),
                            nullable=True))
    op.execute("UPDATE securitygrouprules SET "
               "source_group_id=remote_group_id")
    op.drop_constraint('fk_remote_group_id', 'securitygrouprules',
                       type='foreignkey')
    op.drop_column('securitygrouprules', 'remote_group_id')
    op.alter_column('securitygrouprules', 'remote_ip_prefix',
                    name='source_ip_prefix',
                    existing_type=sa.String(length=255),
                    existing_nullable=True)
    op.drop_column('portsecuritybindings', 'port_security_enabled')
    op.add_column('nvp_network_bindings',
                  sa.Column(u'tz_uuid', sa.String(length=36),
                  nullable=True))
    op.drop_column('nvp_network_bindings', 'phy_uuid')
    op.add_column('networkgateways',
                  sa.Column('shared', sa.Boolean(),
                            nullable=True))

    op.rename_table('subnetroutes', 'routes')
    op.alter_column('nvp_network_bindings', 'phy_uuid',
                    name='tz_uuid',
                    existing_type=sa.String(length=36),
                    existing_nullable=True)
    op.drop_table('routerl3agentbindings')
    op.drop_table('networksecuritybindings')
    op.drop_table('networkdhcpagentbindings')
    op.drop_table('agents')
